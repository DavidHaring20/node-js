LESSON 1 
First part of the lesson was concentrated on installing Node js and getting it ready for use and getting some kind of basic understanding what Node js is.
Furthermore, we have learned why is it used and most importantly where it is used. 
During the second part of the first lesson we have had basic exercises which were crucial to be able to write Javascript code.
We have mostly concentrated on Data types such as: Strings, Objects and Arrays. There were different exercises for 
every Data type, but in general they were about Data manipulation and basic methods for that kind of Data. 
For example: 
    - Strings: showing the number with specified number of decimals(.toFixed()), getting the letter at specified index(.charAt()), 
        replacing the letter at specified index(.replace())...
    - Arrays: outputting the letter at the specified index using the console log(name_of_array[]), creating and populating the array, 
        searching for a specific number(.indexOf())...
    - Objects: initializing the objects, trying to output through console log some property of the object, removing the property of 
        some object using "delete" keyword...
After we have had some code which could be ran, we have then learned how to run that code. We used command "node <file_name>". 
But, needless to say, it would only work once the terminal was in the right directory where the file with the <file_name> could be found.

LESSON 2 
Lesson 2 had a steeper learning curve and was more challenging than the 1. lesson. During the 2. lesson, we have came across few different topics:
    - functions
    - callback functions
    - hoisting
    - REST APIs
We have learned how to write functions, how to define them and how to call them. Then, we have learned how to write functions which can take arguments and later, 
we have learned how to write callback functions. At the end of the lesson we have had brief introduction into server production and Express. We have seen how the 
GET Http Request is written for server side. 

LESSON 3 
Lesson 3 was concentrated aroud variables and Express. First part of the lesson, was about variables and second one was about Server.
During the first part of the lesson, we have covered: 
    - strict mode = restricted variant of JavaScript, thereby implicitly opting-out of "sloppy mode". Strict mode isn't just a subset: it intentionally has different semantics from normal code.
    - variable declaration 
    - object immutability
    - comparing
    - scopes
    - why not to use let in for-loop
In the second part of the lesson, we have worked on Server. We have made new Server from Scratch and we have made few simple 
GET requests and method which responds to that GET Request. We have learned more about:
    - node modules folder
    - package.json 
    - package-lock.json
    - Express 
    - Nodemon 
    - Semantic Versioning
We have also installed Nodemon. It is an extension which auto re-runs the script -> it presses Ctrl + C for us and runs it again. It 
is made so that it detects changes in the file/directory it has been called upon. We installed it by writing: 
    $ nodemon -g install
And we can use it by writing: 
    $ nodemon <file_name>
To gain complete understanding, we have then learned more about "npm install" and various ways to add dependencies to our package.json file.
There are 3 different ways to instantiate the variable: 
    - var(variable) - can be uptaded and re-declared
    - let(let something to happen) - can be updated, but not re-declared
    - const(constant) - can't be updated or redeclared 
As a general rule, use let as much as possible and var only on ocasssions. Use const when you are sure something won't be changed or updated.
USE "let" IN FOR LOOPS. IF YOU USE "var" I WILL PRODUCE SOME ERRORS, BUT IF YOU USE "const" IT WON'T WORK, BECAUSE "const" CAN'T BE UPDATED OR RE-DECLARED.

LESSON 4
In lesson 4, which was "split" into 3 recognizable parts, we could distinguish them like this:
    - 1. Homework part
    - 2. Loops and functional approach to Loops
    - 3. Work on server(POST Http Method)
     During the first part we have gone over the homework. Thing that I have learned is that visual studio was made by an American and therefore,
their Date object and method .getDay returns Integer/Number. That number is index number of the day it got from Date(). It starts from 0, but the days
start from "Sunday", "Monday", "Tuesday" and so on. I "solved" the issue of that by having the day - 1. It was working because I was testing it on Saturdays and Mondays. 
If I would test it on Sunday, it would not work(0 - 1 = -1) and there is no array with -1 index position.
    During the second part of the lecture, we have been talking and learning about functional approaches, lambda functions and loops. We have spoken about filter, reduce and find 
as approaches we will be using from now on when we are working with loops. We have covered .map and it was thoroughly explained to us.
    - .map() - It is a method which returns new array populated with the results of the older array on which this method was called. Main difference is that these results could have been
    modified, as .map usually contains some callback inside of parethenses.
    Example:
    const array1 = [1, 4, 9, 16];
    // pass a function to map
    const map1 = array1.map(x => x * 2);
    console.log(map1);
    // expected output: Array [2, 8, 18, 32]
    During the third part of the lesson, we have done some work with servers. New, main things we have done is:
    - passing the HTML code inside of response.
    - getting the URl that we have typed in and single parameter 
    - getting the URL that we typed with multiple parameters
    - POST Http Method

LESSON 5 
Lesson 5 was the most interesting lesson. I am not saying that all other lessons were less interesting. I am only saying that this lesson was something else.
Firstly we have covered CRUD API, then we have covered making some JSON files and reading from it. Then we have covered serving web pages with Express and Node js.
During the first part, we have came across CRUD API. We have been learning about HTTP Methods:
    - GET
    - POST
    - DELETE 
    - PUT 
    - PATCH 
Get, Post, Delete methods were pretty straightforward. New thing that I learned was that both PUT and PATCH are used when we are updating, but big difference is that the 
PUT is used when we are updating existing source ENTIRELY. PATCH is used when we are updating existing source PARTLY.
Next, we have covered how to create JSON file and write in JSON format. Firslty, we need to create new file which will be called "newFile".
We create it and add it extension: ".json" so it looks like this: newFile.json. Now, when we open it, we need to write pair of curly braces: {} and then write something in it.
{
    "name": "David",
    "age": 20,
    "feeling": "good"
}
Now we can save it and we can create new const or let in some other javascript file and require the file location of that newFile.json.
Something like this:
    const getMyJSONinput = require('/path/to/newFile.txt');
If we want to print it out we can just do:
    console.log(getMyJSONinput);
At the end, we were doing Serving the HTML files or webpages with Express. 
We started by doing the same setup as always, package.json -> fill with Express dependency -> npm install -> creaet app.js -> 
fill it with code which will take express, setup express app and listening. But now, firslty we needed to create a Html file. 
Then we wrote app.get method. Let's say we create index.html file and when we don't pass any parameter it will serve us with index.html.
It looks something like this:

app.get("/", (req, res) => {
    res.send(__dirname + "/index.html");
});

__dirname = is an environment variable that tells you the absolute path of the directory containing the currently executing file.

This concluded lesson 5 and next time we are supposed to learn how to pass the CSS alongside the HTML.

LESSON 6
Lesson 6 was probably the hardest lesson so far as there was a lot of terminal usage, environemt variables and some fancy JavaScript 
stuff which I am not very knowledgeable of. During the lesson 6 we have covered the following:
    - scripts 
    - running scripts 
    - setting and using environment variables 
    - process and process.env 
    - POST Http Method 
    - DELETE Http Method 
    - PATCH Http Method 
    - .filter()

• scripts - is a property of package.json file like a "dependencies". It supports a number of built-in scripts and even some arbitrary scripts
    which have been written by us. They are written in this schema: 
    {
        "scripts": {
            "script_name": "terminal_command"
        },
        "dependencies": {
            "package_name": "version_number"
        }
    } 
    Once they are run, they will execute code they are paired with. 

• Scripts can be run by using this command: 
        $ npm run <script_name>

• ENVIRONMENT VARIABLES = dynamic-named value that can affect the way running processes will behave on a PC. They are 
        part of the environment that processes run in. 
    Setting environemnt variables: 
        $ env:<name_of_environment_variable> = <value_of_environment_variable>
    Example:
        $env:myEnvVariable = 1
    Deleting of an environemnt variables is really easy too. You can do the following: 
        delete myEnvVariable
    
    
• Using environment variables is very easy. You just need to pass it from Environment variable library. You can do it using following:
        process.env.<name_of_environment_variable
    If it was assigned to be 1. Then you can do following: 
        const number = process.env.myEnvVariable;
        console.log(number);
        // Expected output = 1

• POST HTTP METHOD is a method which creates a new resource by providing whole body. You can create it through Postman by setting the type of 
    Request to "POST", providing URL of you API endpoint and then going Body > Raw and selecting JSON format. 
    Once you have done all that, you can type in your text and press "Send".

• DELETE HTTP METHOD is a method which deletes a whole resource. We have done it by using .filter() method. You just need to set your request in Postman 
    to "DELETE", provide URL of your API endpoint and press "Send".

• PATCH HTTP METHOD is a method which updates a resource, but only partly. This means that it will not update whole resource, but only one portion of it. 
    We can use it in Postman. You just need to switch to "PATCH" request, provide URL of your API endpoint and then go Body > Raw, switch format from Text to JSON 
    and write the body.

• .filter() = a method which create a new array with all elements that pass the test implemented by the provided function.  
    Example: 
    const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

    const result = words.filter(word => word.length > 6);
    console.log(result);

    // Expected result: ["exuberant", "destruction", "present"]

LESSON 7 
During the lesson 7 we have covered return in if methods, how to deal with "Cannot set headers after they are sent to the client", 
req.query, key in req.query, App.use(express.static()), jQuery, CDN 

• return statement in if statements = If we have some simple if statement that in case 1 gives something and in case 2 gives something else,
    we are pretty used to doing this:

    if (condition) {
        res.send(1);
    }
    res.send(2);

    But in case of res.send, there is a problem that will occur. "Cannot set headers after they are sent to the client" will be thrown.
    To deal with that we must ensure that only once after the condition is made, res.send is being executed.

    if (condition) {
        return res.send(1);
    }
    res.send(2);

• jQuery = JavaScript library designed to simplify HTML DOM tree traversal and manipulation, as well as event handling, CSS animation
     and Ajax. It is free, open-source software using the permissive MIT License which makes it highly reliable and accessible.

• req.query = property that is an object containing a property for each query string parameter in the route. When QUERY PARSER is set to disabled, 
    it is an empty object {}, otherwise it is the result of the configured query parser.
    Each query object is composed of two elemements: 
    - key
    - value 
    In the following example: 
    localhost:8080/search?q=tobbi+ferret
    "search" is a key, and tobbi+ferret is a value.

• express.static(root, [options]) = built in middleware function in Express. It serves static files and is based on "serve-static"(an npm module).
    The root argument specifies the directory from where it should serve static files. 

• client server model = it describes how server provides resources to one or more clients. Types of servers: web servers, mail servers and file servers.
    Types of clients: desktop computers, laptops, tablets and smartphones.

• Content Delivery Network = a geographically distributed network of proxy servers and their data centers. The goal is to provide high availability 
    and performance by distributing the service spatially relative to end users.


    
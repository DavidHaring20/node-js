LESSON 1 
First part of the lesson was concentrated on installing Node js and getting it ready for use and getting some kind of basic understanding what Node js is.
Furthermore, we have learned why is it used and most importantly where it is used. 
During the second part of the first lesson we have had basic exercises which were crucial to be able to write Javascript code.
We have mostly concentrated on Data types such as: Strings, Objects and Arrays. There were different exercises for 
every Data type, but in general they were about Data manipulation and basic methods for that kind of Data. 
For example: 
    - Strings: showing the number with specified number of decimals(.toFixed()), getting the letter at specified index(.charAt()), 
        replacing the letter at specified index(.replace())...
    - Arrays: outputting the letter at the specified index using the console log(name_of_array[]), creating and populating the array, 
        searching for a specific number(.indexOf())...
    - Objects: initializing the objects, trying to output through console log some property of the object, removing the property of 
        some object using "delete" keyword...
After we have had some code which could be ran, we have then learned how to run that code. We used command "node <file_name>". 
But, needless to say, it would only work once the terminal was in the right directory where the file with the <file_name> could be found.

LESSON 2 
Lesson 2 had a steeper learning curve and was more challenging than the 1. lesson. During the 2. lesson, we have came across few different topics:
    - functions
    - callback functions
    - hoisting
    - REST APIs
We have learned how to write functions, how to define them and how to call them. Then, we have learned how to write functions which can take arguments and later, 
we have learned how to write callback functions. At the end of the lesson we have had brief introduction into server production and Express. We have seen how the 
GET Http Request is written for server side. 

LESSON 3 
Lesson 3 was concentrated aroud variables and Express. First part of the lesson, was about variables and second one was about Server.
During the first part of the lesson, we have covered: 
    - strict mode = restricted variant of JavaScript, thereby implicitly opting-out of "sloppy mode". Strict mode isn't just a subset: it intentionally has different semantics from normal code.
    - variable declaration 
    - object immutability
    - comparing
    - scopes
    - why not to use let in for-loop
In the second part of the lesson, we have worked on Server. We have made new Server from Scratch and we have made few simple 
GET requests and method which responds to that GET Request. We have learned more about:
    - node modules folder
    - package.json 
    - package-lock.json
    - Express 
    - Nodemon 
    - Semantic Versioning
We have also installed Nodemon. It is an extension which auto re-runs the script -> it presses Ctrl + C for us and runs it again. It 
is made so that it detects changes in the file/directory it has been called upon. We installed it by writing: 
    $ nodemon -g install
And we can use it by writing: 
    $ nodemon <file_name>
To gain complete understanding, we have then learned more about "npm install" and various ways to add dependencies to our package.json file.
There are 3 different ways to instantiate the variable: 
    - var(variable) - can be uptaded and re-declared
    - let(let something to happen) - can be updated, but not re-declared
    - const(constant) - can't be updated or redeclared 
As a general rule, use let as much as possible and var only on ocasssions. Use const when you are sure something won't be changed or updated.
USE "let" IN FOR LOOPS. IF YOU USE "var" I WILL PRODUCE SOME ERRORS, BUT IF YOU USE "const" IT WON'T WORK, BECAUSE "const" CAN'T BE UPDATED OR RE-DECLARED.

LESSON 4
In lesson 4, which was "split" into 3 recognizable parts, we could distinguish them like this:
    - 1. Homework part
    - 2. Loops and functional approach to Loops
    - 3. Work on server(POST Http Method)
     During the first part we have gone over the homework. Thing that I have learned is that visual studio was made by an American and therefore,
their Date object and method .getDay returns Integer/Number. That number is index number of the day it got from Date(). It starts from 0, but the days
start from "Sunday", "Monday", "Tuesday" and so on. I "solved" the issue of that by having the day - 1. It was working because I was testing it on Saturdays and Mondays. 
If I would test it on Sunday, it would not work(0 - 1 = -1) and there is no array with -1 index position.
    During the second part of the lecture, we have been talking and learning about functional approaches, lambda functions and loops. We have spoken about filter, reduce and find 
as approaches we will be using from now on when we are working with loops. We have covered .map and it was thoroughly explained to us.
    - .map() - It is a method which returns new array populated with the results of the older array on which this method was called. Main difference is that these results could have been
    modified, as .map usually contains some callback inside of parethenses.
    Example:
    const array1 = [1, 4, 9, 16];
    // pass a function to map
    const map1 = array1.map(x => x * 2);
    console.log(map1);
    // expected output: Array [2, 8, 18, 32]
    During the third part of the lesson, we have done some work with servers. New, main things we have done is:
    - passing the HTML code inside of response.
    - getting the URl that we have typed in and single parameter 
    - getting the URL that we typed with multiple parameters
    - POST Http Method

LESSON 5 
Lesson 5 was the most interesting lesson. I am not saying that all other lessons were less interesting. I am only saying that this lesson was something else.
Firstly we have covered CRUD API, then we have covered making some JSON files and reading from it. Then we have covered serving web pages with Express and Node js.
During the first part, we have came across CRUD API. We have been learning about HTTP Methods:
    - GET
    - POST
    - DELETE 
    - PUT 
    - PATCH 
Get, Post, Delete methods were pretty straightforward. New thing that I learned was that both PUT and PATCH are used when we are updating, but big difference is that the 
PUT is used when we are updating existing source ENTIRELY. PATCH is used when we are updating existing source PARTLY.
Next, we have covered how to create JSON file and write in JSON format. Firslty, we need to create new file which will be called "newFile".
We create it and add it extension: ".json" so it looks like this: newFile.json. Now, when we open it, we need to write pair of curly braces: {} and then write something in it.
{
    "name": "David",
    "age": 20,
    "feeling": "good"
}
Now we can save it and we can create new const or let in some other javascript file and require the file location of that newFile.json.
Something like this:
    const getMyJSONinput = require('/path/to/newFile.txt');
If we want to print it out we can just do:
    console.log(getMyJSONinput);
At the end, we were doing Serving the HTML files or webpages with Express. 
We started by doing the same setup as always, package.json -> fill with Express dependency -> npm install -> creaet app.js -> 
fill it with code which will take express, setup express app and listening. But now, firslty we needed to create a Html file. 
Then we wrote app.get method. Let's say we create index.html file and when we don't pass any parameter it will serve us with index.html.
It looks something like this:

app.get("/", (req, res) => {
    res.send(__dirname + "/index.html");
});

__dirname = is an environment variable that tells you the absolute path of the directory containing the currently executing file.

This concluded lesson 5 and next time we are supposed to learn how to pass the CSS alongside the HTML.